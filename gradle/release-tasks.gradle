//
// some useful default tasks for building a release and publishing it to a repostitory
//

apply plugin: "maven"

uploadArchives {
	repositories {
		mavenDeployer {
			repository(url: config.repository.url) {
				authentication(userName: config.repository.user, password: config.repository.password)
			}
  
			snapshotRepository(url: config.repository.snapshot) {
				authentication(userName: config.repository.user, password: config.repository.password)
			}
						
			pom.project {
				name "${project.name}"
				url "${config.project.url}"
				
				licenses {
					license {
						name "${config.license.name}"
						url "${config.license.url}"
					}
				}
				
				if(plugins.hasPlugin("spring-boot")) {
					println "*** Spring Boot available: configuring uploadArchives for Spring."
					println "*** IMPORTANT: check if Spring Boot version in build.gradle (buildscript.dependencies) and release-tasks.gradle (uploadArchives) match!"
					println "*** Publishing releases to: ${config.repository.url}"
					println ""
	
					dependencyManagement {
       		        	dependencies {
	                    	dependency {
                       			groupId "org.springframework.boot"
               		            artifactId "spring-boot-dependencies"
       		                    version "1.2.4.RELEASE"
	                            type "pom"
                           		scope "import"
                           	}
                       	}
                   	}
               	}
			}
		}
	}
}

task cleanResources(type: Delete) {
	description "Deletes all ressources in the build directory"
	
	delete fileTree(dir: "${buildDir}/resources")
}

task javadocJar(type: Jar) {
	description "Assembles a jar archive containing the javadoc files"
	
	classifier = 'javadoc'
	from javadoc
}

task sourcesJar(type: Jar) {
	description "Assembles a jar archive containing the source files"
	
	classifier = 'sources'
	from sourceSets.main.allSource
}

task testSourcesJar(type: Jar) {
	description "Assembles a jar archive containing the source files"
	
	classifier = 'test-sources'
	from sourceSets.test.allSource
}

task buildSnapshot(dependsOn: ["build"]) {
	description "Assembles the outputs of this project for a SNAPSHOT Release."
}

task buildRelease(dependsOn: ["build"]) {
	description "Assembles the outputs of this project for a Release."
}

task publishRelease {
	description "Publish a RELEASE to a repository"
	
	dependsOn "buildRelease"
	dependsOn "uploadArchives"
}

task publishSnapshot {
	description "Publish a SNAPSHOT to a repository"
	
	dependsOn "buildSnapshot"
	dependsOn "uploadArchives"
}

artifacts {
	archives javadocJar, sourcesJar, testSourcesJar
}
